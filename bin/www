#!/usr/bin/env node

const express = require('express');
const path = require('path');
const index = require('../routes/index');

var app = require('../app');
var http = require('http');
var port = normalizePort(process.env.PORT || '3002');
var server = http.createServer(app);
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);
var sockets = require('../sockets/index')(server);

// Express 靜態 server
app.use(express.static(path.join(__dirname, '..', 'public')));
app.use('/', index);

// EXPRESS functions and app use, KEEP THEM AT THE BOTTOM
// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});
// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    // res.locals.error = req.app.get('env') === 'development' ? err : {};

    console.log(err);
    // render the error page
    res.status(500);
    res.send('error');
});
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = 'string' === typeof port ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = 'string' === typeof addr ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('[SUCCEEDED] Service.chatshier is listening on ' + bind);
}
